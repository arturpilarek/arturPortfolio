import { readFileSync, existsSync, unlinkSync, mkdirSync, writeFileSync } from 'fs';
import { tsObject, mergeObjects, kebabCase, isEmpty } from '@morev/utils';
import { defineNuxtModule, createResolver, addComponentsDir, addTemplate } from '@nuxt/kit';

const ALL_COMPONENTS = {
  TransitionExpand: "TransitionExpand",
  TransitionSlide: "TransitionSlide",
  TransitionScale: "TransitionScale",
  TransitionFade: "TransitionFade"
};
const module = defineNuxtModule({
  meta: {
    name: "@morev/vue-transitions/nuxt",
    configKey: "vueTransitions"
  },
  defaults: {},
  async setup(options, nuxt) {
    var _a;
    const DIRECTORY_NAME = "vue-transitions";
    const resolver = createResolver(import.meta.url);
    const entries = options.components ?? ALL_COMPONENTS;
    if (!Object.values(entries).filter(Boolean).length)
      return;
    (_a = nuxt.options).css ?? (_a.css = []);
    nuxt.options.css.push(`@morev/vue-transitions/styles`);
    nuxt.options.build.transpile.push("@morev/utils");
    const templateContents = readFileSync(resolver.resolve("template.vue"), { encoding: "utf8" });
    const componentsDir = resolver.resolve(DIRECTORY_NAME);
    try {
      existsSync(componentsDir) && unlinkSync(componentsDir);
    } catch {
    }
    mkdirSync(componentsDir, { recursive: true });
    tsObject.entries(entries).forEach(([originalPascalName, neededName]) => {
      const customProps = mergeObjects(
        options.defaultProps ?? {},
        options.componentDefaultProps?.[originalPascalName]
      );
      const neededKebabName = kebabCase(neededName);
      const propsDeclaration = isEmpty(customProps) ? "$attrs" : JSON.stringify(customProps).replace(/}$/, ",...$$attrs}").replace(/"/g, "'");
      writeFileSync(
        resolver.resolve(`${DIRECTORY_NAME}/${neededKebabName}.vue`),
        templateContents.replace(/<%= options\.propsDeclaration %>/g, propsDeclaration).replace(/<%= options\.originalPascalName %>/g, originalPascalName).replace(/<%= options\.neededName %>/g, neededName)
      );
    });
    addComponentsDir({
      path: componentsDir,
      pathPrefix: false,
      watch: false
    });
    const typeMappings = Object.entries(entries).reduce((acc, [originalName, neededName]) => {
      acc.push(`${neededName}: DefineComponent<ComponentPropsAndEmits['${originalName}']>;`);
      return acc;
    }, []).join("\n		");
    const typesPath = addTemplate({
      filename: `types/vue-transitions.d.ts`,
      src: resolver.resolve("template.d.ts"),
      write: true,
      options: {
        declarations: `
		${typeMappings}
	`
      }
    }).dst;
    nuxt.hook("prepare:types", (types) => {
      types.references.push({ path: typesPath });
    });
  }
});

export { module as default };
